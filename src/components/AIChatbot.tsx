import { useState, useRef, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Input } from '@/components/ui/input';
import { Badge } from '@/components/ui/badge';
import { 
  X, 
  Send, 
  Bot, 
  User, 
  Mic, 
  MicOff, 
  Volume2, 
  VolumeX,
  RefreshCw,
  MessageCircle
} from 'lucide-react';

interface AIChatbotProps {
  isOpen: boolean;
  onClose: () => void;
  language: 'en' | 'hi' | 'te';
}

interface Message {
  id: string;
  content: string;
  isBot: boolean;
  timestamp: Date;
  translatedContent?: { [key: string]: string };
}

const AIChatbot = ({ isOpen, onClose, language }: AIChatbotProps) => {
  const [messages, setMessages] = useState<Message[]>([]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [isListening, setIsListening] = useState(false);
  const [isSpeaking, setIsSpeaking] = useState(false);
  const messagesEndRef = useRef<HTMLDivElement>(null);

  const translations = {
    en: {
      title: "AI Job Assistant",
      subtitle: "Ask me about government jobs, applications, and career guidance",
      placeholder: "Ask about jobs, eligibility, application process...",
      send: "Send",
      listening: "Listening...",
      speaking: "Speaking...",
      clear: "Clear Chat",
      close: "Close",
      welcomeMessage: "Hello! I'm your AI Job Assistant. I can help you with:\n\n‚Ä¢ Finding relevant government jobs\n‚Ä¢ Application procedures and deadlines\n‚Ä¢ Eligibility criteria\n‚Ä¢ Exam patterns and preparation tips\n‚Ä¢ Career guidance\n\nHow can I assist you today?",
      sampleQuestions: [
        "Show me latest bank jobs",
        "What is the eligibility for SSC CGL?",
        "How to prepare for railway exams?",
        "Tell me about teaching job vacancies"
      ]
    },
    hi: {
      title: "AI ‡§®‡•å‡§ï‡§∞‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§ï",
      subtitle: "‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§®‡•å‡§ï‡§∞‡§ø‡§Ø‡•ã‡§Ç, ‡§Ü‡§µ‡•á‡§¶‡§® ‡§î‡§∞ ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§® ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç",
      placeholder: "‡§®‡•å‡§ï‡§∞‡§ø‡§Ø‡•ã‡§Ç, ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ, ‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§™‡•Ç‡§õ‡•á‡§Ç...",
      send: "‡§≠‡•á‡§ú‡•á‡§Ç",
      listening: "‡§∏‡•Å‡§® ‡§∞‡§π‡§æ ‡§π‡•à...",
      speaking: "‡§¨‡•ã‡§≤ ‡§∞‡§π‡§æ ‡§π‡•à...",
      clear: "‡§ö‡•à‡§ü ‡§∏‡§æ‡§´‡§º ‡§ï‡§∞‡•á‡§Ç",
      close: "‡§¨‡§Ç‡§¶ ‡§ï‡§∞‡•á‡§Ç",
      welcomeMessage: "‡§®‡§Æ‡§∏‡•ç‡§§‡•á! ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡§æ AI ‡§®‡•å‡§ï‡§∞‡•Ä ‡§∏‡§π‡§æ‡§Ø‡§ï ‡§π‡•Ç‡§Å‡•§ ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§Æ‡§¶‡§¶ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å:\n\n‚Ä¢ ‡§™‡•ç‡§∞‡§æ‡§∏‡§Ç‡§ó‡§ø‡§ï ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§®‡•å‡§ï‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•ã ‡§ñ‡•ã‡§ú‡§®‡•á ‡§Æ‡•á‡§Ç\n‚Ä¢ ‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ ‡§î‡§∞ ‡§∏‡§Æ‡§Ø ‡§∏‡•Ä‡§Æ‡§æ\n‚Ä¢ ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ ‡§Æ‡§æ‡§®‡§¶‡§Ç‡§°\n‚Ä¢ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§î‡§∞ ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§ü‡§ø‡§™‡•ç‡§∏\n‚Ä¢ ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®\n\n‡§Ü‡§ú ‡§Æ‡•à‡§Ç ‡§Ü‡§™‡§ï‡•Ä ‡§ï‡•à‡§∏‡•á ‡§∏‡§π‡§æ‡§Ø‡§§‡§æ ‡§ï‡§∞ ‡§∏‡§ï‡§§‡§æ ‡§π‡•Ç‡§Å?",
      sampleQuestions: [
        "‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§¨‡•à‡§Ç‡§ï ‡§®‡•å‡§ï‡§∞‡§ø‡§Ø‡§æ‡§Ç ‡§¶‡§ø‡§ñ‡§æ‡§è‡§Ç",
        "SSC CGL ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ ‡§ï‡•ç‡§Ø‡§æ ‡§π‡•à?",
        "‡§∞‡•á‡§≤‡§µ‡•á ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§ï‡•Ä ‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡•à‡§∏‡•á ‡§ï‡§∞‡•á‡§Ç?",
        "‡§∂‡§ø‡§ï‡•ç‡§∑‡§ï ‡§®‡•å‡§ï‡§∞‡•Ä ‡§ï‡•Ä ‡§∞‡§ø‡§ï‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§¨‡§§‡§æ‡§è‡§Ç"
      ]
    },
    te: {
      title: "AI ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡±Å",
      subtitle: "‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó‡∞æ‡∞≤‡±Å, ‡∞¶‡∞∞‡∞ñ‡∞æ‡∞∏‡±ç‡∞§‡±Å‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ï‡±Ü‡∞∞‡±Ä‡∞∞‡±ç ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ó‡∞¶‡∞∞‡±ç‡∞∂‡∞®‡∞Ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø",
      placeholder: "‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó‡∞æ‡∞≤‡±Å, ‡∞Ö‡∞∞‡±ç‡∞π‡∞§, ‡∞¶‡∞∞‡∞ñ‡∞æ‡∞∏‡±ç‡∞§‡±Å ‡∞™‡±ç‡∞∞‡∞ï‡±ç‡∞∞‡∞ø‡∞Ø ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Ö‡∞°‡∞ó‡∞Ç‡∞°‡∞ø...",
      send: "‡∞™‡∞Ç‡∞™‡∞Ç‡∞°‡∞ø",
      listening: "‡∞µ‡∞ø‡∞Ç‡∞ü‡±ã‡∞Ç‡∞¶‡∞ø...",
      speaking: "‡∞Æ‡∞æ‡∞ü‡±ç‡∞≤‡∞æ‡∞°‡±Å‡∞§‡±ã‡∞Ç‡∞¶‡∞ø...",
      clear: "‡∞ö‡∞æ‡∞ü‡±ç ‡∞ï‡±ç‡∞≤‡∞ø‡∞Ø‡∞∞‡±ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
      close: "‡∞Æ‡±Ç‡∞∏‡∞ø‡∞µ‡±á‡∞Ø‡∞Ç‡∞°‡∞ø",
      welcomeMessage: "‡∞π‡∞≤‡±ã! ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä AI ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó ‡∞∏‡∞π‡∞æ‡∞Ø‡∞ï‡±Å‡∞°‡∞ø‡∞®‡∞ø. ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å:\n\n‚Ä¢ ‡∞∏‡∞Ç‡∞¨‡∞Ç‡∞ß‡∞ø‡∞§ ‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó‡∞æ‡∞≤‡∞®‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡∞°‡∞Ç‡∞≤‡±ã\n‚Ä¢ ‡∞¶‡∞∞‡∞ñ‡∞æ‡∞∏‡±ç‡∞§‡±Å ‡∞µ‡∞ø‡∞ß‡∞æ‡∞®‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ó‡∞°‡±Å‡∞µ‡±Å‡∞≤‡±Å\n‚Ä¢ ‡∞Ö‡∞∞‡±ç‡∞π‡∞§ ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡∞æ‡∞≤‡±Å\n‚Ä¢ ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑ ‡∞®‡∞Æ‡±Ç‡∞®‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞§‡∞Ø‡∞æ‡∞∞‡±Ä ‡∞ö‡∞ø‡∞ü‡±ç‡∞ï‡∞æ‡∞≤‡±Å\n‚Ä¢ ‡∞ï‡±Ü‡∞∞‡±Ä‡∞∞‡±ç ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ó‡∞¶‡∞∞‡±ç‡∞∂‡∞®‡∞Ç\n\n‡∞à‡∞∞‡±ã‡∞ú‡±Å ‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä‡∞ï‡±Å ‡∞é‡∞≤‡∞æ ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞ó‡∞≤‡∞®‡±Å?",
      sampleQuestions: [
        "‡∞§‡∞æ‡∞ú‡∞æ ‡∞¨‡±ç‡∞Ø‡∞æ‡∞Ç‡∞ï‡±ç ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó‡∞æ‡∞≤‡∞®‡±Å ‡∞ö‡±Ç‡∞™‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø",
        "SSC CGL ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞Ö‡∞∞‡±ç‡∞π‡∞§ ‡∞è‡∞Æ‡∞ø‡∞ü‡∞ø?",
        "‡∞∞‡±à‡∞≤‡±ç‡∞µ‡±á ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑‡∞≤‡∞ï‡±Å ‡∞é‡∞≤‡∞æ ‡∞∏‡∞ø‡∞¶‡±ç‡∞ß‡∞Ç ‡∞ï‡∞æ‡∞µ‡∞æ‡∞≤‡∞ø?",
        "‡∞¨‡±ã‡∞ß‡∞®‡∞æ ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó ‡∞ñ‡∞æ‡∞≥‡±Ä‡∞≤ ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞ö‡±Ü‡∞™‡±ç‡∞™‡∞Ç‡∞°‡∞ø"
      ]
    }
  };

  const t = translations[language];

  // Initialize with welcome message
  useEffect(() => {
    if (isOpen && messages.length === 0) {
      const welcomeMessage: Message = {
        id: 'welcome',
        content: t.welcomeMessage,
        isBot: true,
        timestamp: new Date(),
        translatedContent: {
          en: translations.en.welcomeMessage,
          hi: translations.hi.welcomeMessage,
          te: translations.te.welcomeMessage
        }
      };
      setMessages([welcomeMessage]);
    }
  }, [isOpen, t.welcomeMessage, messages.length]);

  // Scroll to bottom when new messages are added
  useEffect(() => {
    messagesEndRef.current?.scrollIntoView({ behavior: 'smooth' });
  }, [messages]);

  // Mock AI response function (replace with actual AI API call)
  const generateAIResponse = async (userMessage: string): Promise<string> => {
    // Simulate API delay
    await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000));

    // Mock responses based on keywords
    const lowerMessage = userMessage.toLowerCase();
    
    if (lowerMessage.includes('bank') || lowerMessage.includes('‡§¨‡•à‡§Ç‡§ï') || lowerMessage.includes('‡∞¨‡±ç‡∞Ø‡∞æ‡∞Ç‡∞ï‡±ç')) {
      return language === 'en' 
        ? "I found several banking job opportunities for you:\n\nüè¶ **IBPS PO 2025** - 5,208 posts\n‚Ä¢ Eligibility: Graduate\n‚Ä¢ Age: 20-30 years\n‚Ä¢ Deadline: March 15, 2025\n\nüè¶ **Bank of Baroda LBO** - 2,500 posts\n‚Ä¢ Eligibility: Graduate\n‚Ä¢ Age: 20-28 years\n‚Ä¢ Deadline: February 28, 2025\n\nWould you like more details about any specific position?"
        : language === 'hi'
        ? "‡§Æ‡•à‡§Ç‡§®‡•á ‡§Ü‡§™‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§à ‡§¨‡•à‡§Ç‡§ï‡§ø‡§Ç‡§ó ‡§®‡•å‡§ï‡§∞‡•Ä ‡§ï‡•á ‡§Ö‡§µ‡§∏‡§∞ ‡§™‡§æ‡§è ‡§π‡•à‡§Ç:\n\nüè¶ **‡§Ü‡§à‡§¨‡•Ä‡§™‡•Ä‡§è‡§∏ ‡§™‡•Ä‡§ì 2025** - 5,208 ‡§™‡§¶\n‚Ä¢ ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ: ‡§∏‡•ç‡§®‡§æ‡§§‡§ï\n‚Ä¢ ‡§Ü‡§Ø‡•Å: 20-30 ‡§µ‡§∞‡•ç‡§∑\n‚Ä¢ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§§‡§ø‡§•‡§ø: 15 ‡§Æ‡§æ‡§∞‡•ç‡§ö 2025\n\nüè¶ **‡§¨‡•à‡§Ç‡§ï ‡§ë‡§´ ‡§¨‡§°‡§º‡•å‡§¶‡§æ ‡§è‡§≤‡§¨‡•Ä‡§ì** - 2,500 ‡§™‡§¶\n‚Ä¢ ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ: ‡§∏‡•ç‡§®‡§æ‡§§‡§ï\n‚Ä¢ ‡§Ü‡§Ø‡•Å: 20-28 ‡§µ‡§∞‡•ç‡§∑\n‚Ä¢ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§§‡§ø‡§•‡§ø: 28 ‡§´‡§∞‡§µ‡§∞‡•Ä 2025\n\n‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§ï‡§ø‡§∏‡•Ä ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡§¶ ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§î‡§∞ ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?"
        : "‡∞®‡±á‡∞®‡±Å ‡∞Æ‡±Ä ‡∞ï‡±ã‡∞∏‡∞Ç ‡∞Ö‡∞®‡±á‡∞ï ‡∞¨‡±ç‡∞Ø‡∞æ‡∞Ç‡∞ï‡∞ø‡∞Ç‡∞ó‡±ç ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó ‡∞Ö‡∞µ‡∞ï‡∞æ‡∞∂‡∞æ‡∞≤‡∞®‡±Å ‡∞ï‡∞®‡±Å‡∞ó‡±ä‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å:\n\nüè¶ **IBPS PO 2025** - 5,208 ‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±Å‡∞≤‡±Å\n‚Ä¢ ‡∞Ö‡∞∞‡±ç‡∞π‡∞§: ‡∞ó‡±ç‡∞∞‡∞æ‡∞°‡±ç‡∞Ø‡±Å‡∞Ø‡±á‡∞ü‡±ç\n‚Ä¢ ‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å: 20-30 ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡±Å\n‚Ä¢ ‡∞ó‡∞°‡±Å‡∞µ‡±Å: ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ö‡∞ø 15, 2025\n\nüè¶ **‡∞¨‡±ç‡∞Ø‡∞æ‡∞Ç‡∞ï‡±ç ‡∞Ü‡∞´‡±ç ‡∞¨‡∞∞‡±ã‡∞°‡∞æ LBO** - 2,500 ‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±Å‡∞≤‡±Å\n‚Ä¢ ‡∞Ö‡∞∞‡±ç‡∞π‡∞§: ‡∞ó‡±ç‡∞∞‡∞æ‡∞°‡±ç‡∞Ø‡±Å‡∞Ø‡±á‡∞ü‡±ç\n‚Ä¢ ‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å: 20-28 ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡±Å\n‚Ä¢ ‡∞ó‡∞°‡±Å‡∞µ‡±Å: ‡∞´‡∞ø‡∞¨‡±ç‡∞∞‡∞µ‡∞∞‡∞ø 28, 2025\n\n‡∞Æ‡±Ä‡∞∞‡±Å ‡∞è‡∞¶‡±à‡∞®‡∞æ ‡∞®‡∞ø‡∞∞‡±ç‡∞¶‡∞ø‡∞∑‡±ç‡∞ü ‡∞∏‡±ç‡∞•‡∞æ‡∞®‡∞Ç ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞Æ‡∞∞‡∞ø‡∞®‡±ç‡∞®‡∞ø ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å ‡∞ï‡∞æ‡∞µ‡∞æ‡∞≤‡∞æ?";
    }

    if (lowerMessage.includes('railway') || lowerMessage.includes('‡§∞‡•á‡§≤‡§µ‡•á') || lowerMessage.includes('‡∞∞‡±à‡∞≤‡±ç‡∞µ‡±á')) {
      return language === 'en'
        ? "Here are the latest Railway job opportunities:\n\nüöÜ **RRB Technician 2025** - 6,238 posts\n‚Ä¢ Eligibility: ITI/Diploma\n‚Ä¢ Age: 18-28 years\n‚Ä¢ Deadline: April 10, 2025\n\nüöÜ **Railway Group D** - Expected soon\n‚Ä¢ Eligibility: 10th Pass\n‚Ä¢ Age: 18-33 years\n\n**Preparation Tips:**\n‚Ä¢ Focus on General Awareness\n‚Ä¢ Practice Mathematics daily\n‚Ä¢ Study Railway-specific topics\n\nWould you like exam pattern details?"
        : language === 'hi'
        ? "‡§Ø‡§π‡§æ‡§Å ‡§®‡§µ‡•Ä‡§®‡§§‡§Æ ‡§∞‡•á‡§≤‡§µ‡•á ‡§®‡•å‡§ï‡§∞‡•Ä ‡§ï‡•á ‡§Ö‡§µ‡§∏‡§∞ ‡§π‡•à‡§Ç:\n\nüöÜ **‡§Ü‡§∞‡§Ü‡§∞‡§¨‡•Ä ‡§§‡§ï‡§®‡•Ä‡§∂‡§ø‡§Ø‡§® 2025** - 6,238 ‡§™‡§¶\n‚Ä¢ ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ: ‡§Ü‡§à‡§ü‡•Ä‡§Ü‡§à/‡§°‡§ø‡§™‡•ç‡§≤‡•ã‡§Æ‡§æ\n‚Ä¢ ‡§Ü‡§Ø‡•Å: 18-28 ‡§µ‡§∞‡•ç‡§∑\n‚Ä¢ ‡§Ö‡§Ç‡§§‡§ø‡§Æ ‡§§‡§ø‡§•‡§ø: 10 ‡§Ö‡§™‡•ç‡§∞‡•à‡§≤ 2025\n\nüöÜ **‡§∞‡•á‡§≤‡§µ‡•á ‡§ó‡•ç‡§∞‡•Å‡§™ ‡§°‡•Ä** - ‡§ú‡§≤‡•ç‡§¶ ‡§π‡•Ä ‡§Ö‡§™‡•á‡§ï‡•ç‡§∑‡§ø‡§§\n‚Ä¢ ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ: 10‡§µ‡•Ä‡§Ç ‡§™‡§æ‡§∏\n‚Ä¢ ‡§Ü‡§Ø‡•Å: 18-33 ‡§µ‡§∞‡•ç‡§∑\n\n**‡§§‡•à‡§Ø‡§æ‡§∞‡•Ä ‡§ï‡•á ‡§ü‡§ø‡§™‡•ç‡§∏:**\n‚Ä¢ ‡§∏‡§æ‡§Æ‡§æ‡§®‡•ç‡§Ø ‡§ú‡§æ‡§ó‡§∞‡•Ç‡§ï‡§§‡§æ ‡§™‡§∞ ‡§´‡•ã‡§ï‡§∏ ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§ó‡§£‡§ø‡§§ ‡§ï‡§æ ‡§¶‡•à‡§®‡§ø‡§ï ‡§Ö‡§≠‡•ç‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç\n‚Ä¢ ‡§∞‡•á‡§≤‡§µ‡•á-‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§µ‡§ø‡§∑‡§Ø‡•ã‡§Ç ‡§ï‡§æ ‡§Ö‡§ß‡•ç‡§Ø‡§Ø‡§® ‡§ï‡§∞‡•á‡§Ç\n\n‡§ï‡•ç‡§Ø‡§æ ‡§Ü‡§™ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§ï‡§æ ‡§µ‡§ø‡§µ‡§∞‡§£ ‡§ö‡§æ‡§π‡•á‡§Ç‡§ó‡•á?"
        : "‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞§‡∞æ‡∞ú‡∞æ ‡∞∞‡±à‡∞≤‡±ç‡∞µ‡±á ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó ‡∞Ö‡∞µ‡∞ï‡∞æ‡∞∂‡∞æ‡∞≤‡±Å ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞Ø‡∞ø:\n\nüöÜ **RRB ‡∞ü‡±Ü‡∞ï‡±ç‡∞®‡±Ä‡∞∑‡∞ø‡∞Ø‡∞®‡±ç 2025** - 6,238 ‡∞™‡±ã‡∞∏‡±ç‡∞ü‡±Å‡∞≤‡±Å\n‚Ä¢ ‡∞Ö‡∞∞‡±ç‡∞π‡∞§: ITI/‡∞°‡∞ø‡∞™‡±ç‡∞≤‡±ä‡∞Æ‡∞æ\n‚Ä¢ ‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å: 18-28 ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡±Å\n‚Ä¢ ‡∞ó‡∞°‡±Å‡∞µ‡±Å: ‡∞è‡∞™‡±ç‡∞∞‡∞ø‡∞≤‡±ç 10, 2025\n\nüöÜ **‡∞∞‡±à‡∞≤‡±ç‡∞µ‡±á ‡∞ó‡±ç‡∞∞‡±Ç‡∞™‡±ç D** - ‡∞§‡±ç‡∞µ‡∞∞‡∞≤‡±ã ‡∞Ü‡∞∂‡∞ø‡∞Ç‡∞ö‡∞¨‡∞°‡±Å‡∞§‡±ã‡∞Ç‡∞¶‡∞ø\n‚Ä¢ ‡∞Ö‡∞∞‡±ç‡∞π‡∞§: 10‡∞µ ‡∞§‡∞∞‡∞ó‡∞§‡∞ø ‡∞â‡∞§‡±ç‡∞§‡±Ä‡∞∞‡±ç‡∞£‡∞§\n‚Ä¢ ‡∞µ‡∞Ø‡∞∏‡±ç‡∞∏‡±Å: 18-33 ‡∞∏‡∞Ç‡∞µ‡∞§‡±ç‡∞∏‡∞∞‡∞æ‡∞≤‡±Å\n\n**‡∞§‡∞Ø‡∞æ‡∞∞‡±Ä ‡∞ö‡∞ø‡∞ü‡±ç‡∞ï‡∞æ‡∞≤‡±Å:**\n‚Ä¢ ‡∞∏‡∞æ‡∞ß‡∞æ‡∞∞‡∞£ ‡∞Ö‡∞µ‡∞ó‡∞æ‡∞π‡∞®‡∞™‡±à ‡∞¶‡±É‡∞∑‡±ç‡∞ü‡∞ø ‡∞™‡±Ü‡∞ü‡±ç‡∞ü‡∞Ç‡∞°‡∞ø\n‚Ä¢ ‡∞∞‡±ã‡∞ú‡±Ç ‡∞ó‡∞£‡∞ø‡∞§‡∞Ç ‡∞Ö‡∞≠‡±ç‡∞Ø‡∞∏‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø\n‚Ä¢ ‡∞∞‡±à‡∞≤‡±ç‡∞µ‡±á-‡∞®‡∞ø‡∞∞‡±ç‡∞¶‡∞ø‡∞∑‡±ç‡∞ü ‡∞µ‡∞ø‡∞∑‡∞Ø‡∞æ‡∞≤‡∞®‡±Å ‡∞Ö‡∞ß‡±ç‡∞Ø‡∞Ø‡∞®‡∞Ç ‡∞ö‡±á‡∞Ø‡∞Ç‡∞°‡∞ø\n\n‡∞Æ‡±Ä‡∞∞‡±Å ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑ ‡∞®‡∞Æ‡±Ç‡∞®‡∞æ ‡∞µ‡∞ø‡∞µ‡∞∞‡∞æ‡∞≤‡±Å ‡∞ï‡∞æ‡∞µ‡∞æ‡∞≤‡∞æ?";
    }

    // Default response
    return language === 'en'
      ? "Thank you for your question! I'm here to help with government job information. You can ask me about:\n\n‚Ä¢ Job notifications and deadlines\n‚Ä¢ Eligibility criteria\n‚Ä¢ Application procedures\n‚Ä¢ Exam patterns and syllabus\n‚Ä¢ Career guidance\n\nPlease feel free to ask anything specific about government jobs!"
      : language === 'hi'
      ? "‡§Ü‡§™‡§ï‡•á ‡§™‡•ç‡§∞‡§∂‡•ç‡§® ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ß‡§®‡•ç‡§Ø‡§µ‡§æ‡§¶! ‡§Æ‡•à‡§Ç ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§®‡•å‡§ï‡§∞‡•Ä ‡§ï‡•Ä ‡§ú‡§æ‡§®‡§ï‡§æ‡§∞‡•Ä ‡§Æ‡•á‡§Ç ‡§Æ‡§¶‡§¶ ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ø‡§π‡§æ‡§Å ‡§π‡•Ç‡§Å‡•§ ‡§Ü‡§™ ‡§Æ‡•Å‡§ù‡§∏‡•á ‡§™‡•Ç‡§õ ‡§∏‡§ï‡§§‡•á ‡§π‡•à‡§Ç:\n\n‚Ä¢ ‡§®‡•å‡§ï‡§∞‡•Ä ‡§Ö‡§ß‡§ø‡§∏‡•Ç‡§ö‡§®‡§æ ‡§î‡§∞ ‡§∏‡§Æ‡§Ø ‡§∏‡•Ä‡§Æ‡§æ\n‚Ä¢ ‡§Ø‡•ã‡§ó‡•ç‡§Ø‡§§‡§æ ‡§Æ‡§æ‡§®‡§¶‡§Ç‡§°\n‚Ä¢ ‡§Ü‡§µ‡•á‡§¶‡§® ‡§™‡•ç‡§∞‡§ï‡•ç‡§∞‡§ø‡§Ø‡§æ\n‚Ä¢ ‡§™‡§∞‡•Ä‡§ï‡•ç‡§∑‡§æ ‡§™‡•à‡§ü‡§∞‡•ç‡§® ‡§î‡§∞ ‡§™‡§æ‡§†‡•ç‡§Ø‡§ï‡•ç‡§∞‡§Æ\n‚Ä¢ ‡§ï‡§∞‡§ø‡§Ø‡§∞ ‡§Æ‡§æ‡§∞‡•ç‡§ó‡§¶‡§∞‡•ç‡§∂‡§®\n\n‡§ï‡•É‡§™‡§Ø‡§æ ‡§∏‡§∞‡§ï‡§æ‡§∞‡•Ä ‡§®‡•å‡§ï‡§∞‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§¨‡§æ‡§∞‡•á ‡§Æ‡•á‡§Ç ‡§ï‡•Å‡§õ ‡§≠‡•Ä ‡§µ‡§ø‡§∂‡§ø‡§∑‡•ç‡§ü ‡§™‡•Ç‡§õ‡§®‡•á ‡§Æ‡•á‡§Ç ‡§∏‡§Ç‡§ï‡•ã‡§ö ‡§® ‡§ï‡§∞‡•á‡§Ç!"
      : "‡∞Æ‡±Ä ‡∞™‡±ç‡∞∞‡∞∂‡±ç‡∞®‡∞ï‡±Å ‡∞ß‡∞®‡±ç‡∞Ø‡∞µ‡∞æ‡∞¶‡∞æ‡∞≤‡±Å! ‡∞®‡±á‡∞®‡±Å ‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó ‡∞∏‡∞Æ‡∞æ‡∞ö‡∞æ‡∞∞‡∞Ç‡∞§‡±ã ‡∞∏‡∞π‡∞æ‡∞Ø‡∞Ç ‡∞ö‡±á‡∞Ø‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞á‡∞ï‡±ç‡∞ï‡∞° ‡∞â‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å. ‡∞Æ‡±Ä‡∞∞‡±Å ‡∞®‡∞®‡±ç‡∞®‡±Å ‡∞Ö‡∞°‡∞ó‡∞µ‡∞ö‡±ç‡∞ö‡±Å:\n\n‚Ä¢ ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó ‡∞®‡±ã‡∞ü‡∞ø‡∞´‡∞ø‡∞ï‡±á‡∞∑‡∞®‡±ç‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞ó‡∞°‡±Å‡∞µ‡±Å‡∞≤‡±Å\n‚Ä¢ ‡∞Ö‡∞∞‡±ç‡∞π‡∞§ ‡∞™‡±ç‡∞∞‡∞Æ‡∞æ‡∞£‡∞æ‡∞≤‡±Å\n‚Ä¢ ‡∞¶‡∞∞‡∞ñ‡∞æ‡∞∏‡±ç‡∞§‡±Å ‡∞µ‡∞ø‡∞ß‡∞æ‡∞®‡∞æ‡∞≤‡±Å\n‚Ä¢ ‡∞™‡∞∞‡±Ä‡∞ï‡±ç‡∞∑ ‡∞®‡∞Æ‡±Ç‡∞®‡∞æ‡∞≤‡±Å ‡∞Æ‡∞∞‡∞ø‡∞Ø‡±Å ‡∞∏‡∞ø‡∞≤‡∞¨‡∞∏‡±ç\n‚Ä¢ ‡∞ï‡±Ü‡∞∞‡±Ä‡∞∞‡±ç ‡∞Æ‡∞æ‡∞∞‡±ç‡∞ó‡∞¶‡∞∞‡±ç‡∞∂‡∞®‡∞Ç\n\n‡∞™‡±ç‡∞∞‡∞≠‡±Å‡∞§‡±ç‡∞µ ‡∞â‡∞¶‡±ç‡∞Ø‡±ã‡∞ó‡∞æ‡∞≤ ‡∞ó‡±Å‡∞∞‡∞ø‡∞Ç‡∞ö‡∞ø ‡∞è‡∞¶‡±à‡∞®‡∞æ ‡∞®‡∞ø‡∞∞‡±ç‡∞¶‡∞ø‡∞∑‡±ç‡∞ü‡∞Ç‡∞ó‡∞æ ‡∞Ö‡∞°‡∞ó‡∞°‡∞æ‡∞®‡∞ø‡∞ï‡∞ø ‡∞∏‡∞Ç‡∞ï‡±ã‡∞ö‡∞ø‡∞Ç‡∞ö‡∞ï‡∞Ç‡∞°‡∞ø!";
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMessage: Message = {
      id: Date.now().toString(),
      content: inputMessage,
      isBot: false,
      timestamp: new Date()
    };

    setMessages(prev => [...prev, userMessage]);
    setInputMessage('');
    setIsLoading(true);

    try {
      const aiResponse = await generateAIResponse(inputMessage);
      const botMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: aiResponse,
        isBot: true,
        timestamp: new Date()
      };

      setMessages(prev => [...prev, botMessage]);
    } catch (error) {
      console.error('Error generating AI response:', error);
      const errorMessage: Message = {
        id: (Date.now() + 1).toString(),
        content: language === 'en' 
          ? "Sorry, I encountered an error. Please try again."
          : language === 'hi'
          ? "‡§ï‡•ç‡§∑‡§Æ‡§æ ‡§ï‡§∞‡•á‡§Ç, ‡§Æ‡•Å‡§ù‡•á ‡§è‡§ï ‡§§‡•ç‡§∞‡•Å‡§ü‡§ø ‡§ï‡§æ ‡§∏‡§æ‡§Æ‡§®‡§æ ‡§ï‡§∞‡§®‡§æ ‡§™‡§°‡§º‡§æ‡•§ ‡§ï‡•É‡§™‡§Ø‡§æ ‡§™‡•Å‡§®‡§É ‡§™‡•ç‡§∞‡§Ø‡§æ‡§∏ ‡§ï‡§∞‡•á‡§Ç‡•§"
          : "‡∞ï‡±ç‡∞∑‡∞Æ‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø, ‡∞®‡±á‡∞®‡±Å ‡∞≤‡±ã‡∞™‡∞æ‡∞®‡±ç‡∞®‡∞ø ‡∞é‡∞¶‡±Å‡∞∞‡±ç‡∞ï‡±ä‡∞®‡±ç‡∞®‡∞æ‡∞®‡±Å. ‡∞¶‡∞Ø‡∞ö‡±á‡∞∏‡∞ø ‡∞Æ‡∞≥‡±ç‡∞≤‡±Ä ‡∞™‡±ç‡∞∞‡∞Ø‡∞§‡±ç‡∞®‡∞ø‡∞Ç‡∞ö‡∞Ç‡∞°‡∞ø‡•§",
        isBot: true,
        timestamp: new Date()
      };
      setMessages(prev => [...prev, errorMessage]);
    } finally {
      setIsLoading(false);
    }
  };

  const handleKeyPress = (e: React.KeyboardEvent) => {
    if (e.key === 'Enter' && !e.shiftKey) {
      e.preventDefault();
      handleSendMessage();
    }
  };

  const clearChat = () => {
    setMessages([]);
    // Re-add welcome message
    const welcomeMessage: Message = {
      id: 'welcome',
      content: t.welcomeMessage,
      isBot: true,
      timestamp: new Date()
    };
    setMessages([welcomeMessage]);
  };

  const handleSampleQuestion = (question: string) => {
    setInputMessage(question);
  };

  if (!isOpen) return null;

  return (
    <div className="fixed inset-0 bg-black/50 flex items-center justify-center z-50 p-4">
      <Card className="w-full max-w-2xl max-h-[80vh] flex flex-col shadow-2xl">
        <CardHeader className="flex-row items-center justify-between space-y-0 pb-3 bg-gradient-primary text-white rounded-t-lg">
          <div className="flex items-center gap-3">
            <div className="w-10 h-10 bg-white/20 rounded-full flex items-center justify-center">
              <Bot className="h-5 w-5" />
            </div>
            <div>
              <CardTitle className="text-lg">{t.title}</CardTitle>
              <p className="text-sm text-white/90">{t.subtitle}</p>
            </div>
          </div>
          <div className="flex items-center gap-2">
            <Button
              variant="ghost"
              size="sm"
              onClick={clearChat}
              className="text-white hover:bg-white/20"
            >
              <RefreshCw className="h-4 w-4" />
            </Button>
            <Button
              variant="ghost"
              size="sm"
              onClick={onClose}
              className="text-white hover:bg-white/20"
            >
              <X className="h-4 w-4" />
            </Button>
          </div>
        </CardHeader>

        <CardContent className="flex-1 flex flex-col p-0">
          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4 min-h-[300px] max-h-[400px]">
            {messages.map((message) => (
              <div
                key={message.id}
                className={`flex gap-3 ${message.isBot ? '' : 'flex-row-reverse'}`}
              >
                <div className={`
                  w-8 h-8 rounded-full flex items-center justify-center flex-shrink-0
                  ${message.isBot ? 'bg-primary text-white' : 'bg-accent text-white'}
                `}>
                  {message.isBot ? <Bot className="h-4 w-4" /> : <User className="h-4 w-4" />}
                </div>
                <div className={`
                  max-w-[80%] p-3 rounded-lg
                  ${message.isBot 
                    ? 'bg-muted text-foreground' 
                    : 'bg-primary text-primary-foreground'
                  }
                `}>
                  <div className="whitespace-pre-wrap text-sm">
                    {message.translatedContent ? 
                      message.translatedContent[language] || message.content : 
                      message.content
                    }
                  </div>
                  <div className="text-xs opacity-70 mt-1">
                    {message.timestamp.toLocaleTimeString([], { 
                      hour: '2-digit', 
                      minute: '2-digit' 
                    })}
                  </div>
                </div>
              </div>
            ))}
            {isLoading && (
              <div className="flex gap-3">
                <div className="w-8 h-8 rounded-full bg-primary text-white flex items-center justify-center">
                  <Bot className="h-4 w-4" />
                </div>
                <div className="bg-muted p-3 rounded-lg">
                  <div className="flex space-x-1">
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce"></div>
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.1s' }}></div>
                    <div className="w-2 h-2 bg-primary rounded-full animate-bounce" style={{ animationDelay: '0.2s' }}></div>
                  </div>
                </div>
              </div>
            )}
            <div ref={messagesEndRef} />
          </div>

          {/* Sample Questions */}
          {messages.length <= 1 && (
            <div className="p-4 border-t bg-muted/30">
              <p className="text-sm text-muted-foreground mb-3">Try asking:</p>
              <div className="grid grid-cols-1 sm:grid-cols-2 gap-2">
                {t.sampleQuestions.map((question, index) => (
                  <Button
                    key={index}
                    variant="outline"
                    size="sm"
                    onClick={() => handleSampleQuestion(question)}
                    className="text-left justify-start h-auto p-2 text-sm whitespace-normal"
                  >
                    <MessageCircle className="h-3 w-3 mr-2 flex-shrink-0" />
                    {question}
                  </Button>
                ))}
              </div>
            </div>
          )}

          {/* Input */}
          <div className="p-4 border-t">
            <div className="flex gap-2">
              <Input
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={handleKeyPress}
                placeholder={t.placeholder}
                className="flex-1"
                disabled={isLoading}
              />
              <Button
                onClick={handleSendMessage}
                disabled={!inputMessage.trim() || isLoading}
                size="sm"
                className="btn-government"
              >
                <Send className="h-4 w-4" />
              </Button>
            </div>
          </div>
        </CardContent>
      </Card>
    </div>
  );
};

export default AIChatbot;